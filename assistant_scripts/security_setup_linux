#!/usr/bin/perl

if ($ARGV[0] eq "-d") {
	$debug = 1;
}

$gNewUsername;


&main;

sub main {
	print "This script is based off my notes to myself after doing some reserach on securing linux. This occurred after one of my Raspberry Pis became infected with a virus and reinforced the imporatance after the Dyn internet outage. See http://bit.ly/lin-sec for more info.\n";
	&enterToContinue;

	print "Be sure that this script is launched AS ROOT (NOT sudo and NOT su - I mean you CAN run it with those, but you might run into errors) as it will be facilitating many system level changes, including manipulating users.\n";
	&enterToContinue;

	&printHeader("New User Setup");

	my $newUser = &checkYn("Do you want to add a new user with sudo (important on raspbian, probably less so on other distros)?");
	if ($newUser) {
		&newUserSetup;
	}

	&printHeader("ssh Setup");
	&sshSetup;

	&printHeader("system ssh Setup");
	chdir "/etc/ssh";
	&runOnSystem("cp sshd_config sshd_config.default");
	&sshdConfiguration;


	&printHeader("Getting up to Date");

	my $runUpgrades = &checkYn("Do you want to run upgrades before continuing? (apt-get update will run regardless)");

	print "Please note that since the next step installs packages that require configuration afterwards, you will need to come back in a few minutes after the installation completes.";
	&enterToContinue;

	&updates($runUpgrades); #bsd-mailx setup must happen after this & ufw

	my $configMail = checkYn("Do you want to configure the mailx package?");
	&configMail($configMail);

	&configUpdates;

	&configFirewall;

	&finishUp;
}

sub configFirewall {
	# show netstat
	# ask if wanting to limit to subnet
	# note ssh for user

	print "About to show running processes with open network sockets to help with configuring firewall";
	&enterToContinue;
	&runOnSystem("netstat -tulpn");

	my $limitedSubnetSetup = &checkYn("Do you want to limit any connections to just one subnet?");

	my @ufwCommands;
	if ($limitedSubnetSetup) {
		my $subnet;
		while ($subnet !~ /^\d+\.\d+\.\d+\.\d+\/\d+$/) {
			print "Please enter the subnet with CIDR notation (ex 192.168.1.0/24):";
			chomp($subnet = <STDIN>);
		}
		print "Please enter all ports separated by spaces that you wish to have only accessible via this subnet (don't forget you need port 22 for ssh to work if you are setting up through that):\n";
		chomp(my $ports = <STDIN>);
		my @subnetPorts = split / /, $ports;
		foreach (@subnetPorts) {
			$_ =~ s/\D//;
			if ($_ =~ /\d+/) {
				push @ufwCommands, "ufw allow from $subnet to any port $_";
			}
		}
	}


	my $openSetup = &checkyN("Do you want to allow any connections from anywhere?");
	if ($openSetup) {
		print "Please enter all ports separated by spaces that you wish to have accessible from any network, whether it's part of this subnet or not (don't forget you need port 22 for ssh to work if you are setting up through that):\n";
		chomp(my $ports = <STDIN>);
		my @subnetPorts = split / /, $ports;
		foreach (@subnetPorts) {
			$_ =~ s/\D//;
			if ($_ =~ /\d+/) {
				push @ufwCommands, "ufw allow $_";
			}
		}
	}

	print "Here are all the ufw commands that will be run:\n";
	foreach (@ufwCommands) {
		print "$_\n";
	}
	my $satisfied = checkYn("Are you satisfied with these entries?");
	if ($satisfied) {
		foreach (@ufwCommands) {
			&runOnSystem("$_");
		}
	} else {
		&configFirewall;
	}





}

sub configUpdates {
	print "Please choose yes to activate unattended-upgrades:";
	&enterToContinue;
	&runOnSystem("dpkg-reconfigure unattended-upgrades");
	print "About to open config for unattended-upgrades - please make sure the stuff you need isn't commented and pay attention to the email and reboot settings:";
	&enterToContinue;
	&runOnSystem("nano /etc/apt/apt.conf.d/50unattended-upgrades");
}

sub configMail {
	my $config = $_[0];
	if ($config) {
		print "Follow prompts and use common sense for setup:";
		&enterToContinue;
		&runOnSystem("dpkg-reconfigure exim4-config");
	}

}

sub newUserSetup {
	print "What username would you like?: ";
	chomp(my $newUsername = <STDIN>);
	$newUsername =~ s/\W//gi;
	my $confirm = &checkYn("'$newUsername' - is this correct?");
	if ($confirm == 0) {
		print "Try one more time: ";
		chomp($newUsername = <STDIN>);
		$newUsername =~ s/\W//gi;
		$confirm = &checkYn("'$newUsername' - is this correct?");
		if ($confirm == 0) {
			&dieWithMessage("too many username attempts");
		}
	}
	print "Adding new user '$newUsername' - please follow prompts from system utility:\n";
	$gNewUsername = $newUsername;
	&runOnSystem("adduser $newUsername");
	&runOnSystem("adduser $newUsername sudo");

	&checkPiUser;
}

sub sshSetup {
	my $sshConfirm;
	if ($gNewUsername ne "") {
		$sshConfirm = &checkYn("Would you like to configure ssh for $gNewUsername?");
	} else {
		$sshConfirm = &checkYn("Would you like to configure ssh for a user?");
	}

	if ($sshConfirm == 0) {
		return;
	}

	if ($gNewUsername eq "") {
		print "Which user?: ";
		chomp($gNewUsername = <STDIN>);
		$gNewUsername =~ s/\W//gi;
	}

	chdir "/home/$gNewUsername";
	if (&doesItExist(".ssh") == 0) {
		&runOnSystem("mkdir .ssh");
	}
	chdir ".ssh";
	if (&doesItExist("id_rsa") == 0) {
		print "Creating ssh key - follow prompts and\n\t-place in directory /home/$gNewUsername/.ssh\n\t-name the file 'id_rsa' (no quotes)\n\t-add a password if you like, but I would argue it's not necessary\n";
		&runOnSystem("ssh-keygen -t rsa -b 4096");
		my $printPub = &checkYn("Would you like the public key printed onscreen?");
		if ($printPub) {
			&showFileContents("id_rsa.pub");
		}
	}

	if (&doesItExist("authorized_keys") == 0) {
		&runOnSystem("touch authorized_keys");
		print "Paste any public ssh keys in here and press CTRL-D when finished (http://bit.ly/ssh-keygen for more info):\n\n";
		my @publicKeys = <STDIN>;
		open KEYS, ">>authorized_keys";
		print KEYS "@publicKeys";
		close KEYS;
	}

	chdir "../";

	&runOnSystem("chmod -R 700 .ssh");
	&runOnSystem("chown -R $gNewUsername:$gNewUsername .ssh");




}

sub sshdConfiguration {

		open SSHDCONFIG, "<sshd_config";
		my @sshdconf = <SSHDCONFIG>;
		close SSHDCONFIG;

		my %sshdSettings;
		foreach(@sshdconf) {
			chomp;
			if ($_ =~ /^(\w+)\s+(.*)/) {
				my $key = $1;
				my $value = $2;
				if (exists $sshdSettings{$key}) {
					$key = "$key*!*$value*!*";
				}
				$sshdSettings{$key} = $value;
			}
		}


		my $permitRoot = &checkyN("Do you want to permit root access to ssh?");
		if ($permitRoot == 1) {
			$sshdSettings{"PermitRootLogin"} = "yes";
		} else {
			$sshdSettings{"PermitRootLogin"} = "no";
		}

		my $passwordAuth = &checkyN("Do you want to allow password login over ssh (Important! Choose YES if you didn't setup any public keys earlier or you will be locked out of ssh!)?");
		if ($passwordAuth == 1) {
			$sshdSettings{"PasswordAuthentication"} = "yes";
		} else {
			$sshdSettings{"PasswordAuthentication"} = "no";
		}

		my $ip4Address = &checkYn("Do you want to allow ssh access on IPv4?");
		my $ip6Address = &checkyN("Do you want to allow ssh access on IPv6?");
		if ($ip4Address == 1 && $ip6Address == 1) {
			$sshdSettings{"AddressFamily"} = "any";
		} elsif ($ip4Address == 0 && $ip6Address == 1) {
			$sshdSettings{"AddressFamily"} = "inet6";
		} elsif ($ip4Address == 1 && $ip6Address == 0) {
			$sshdSettings{"AddressFamily"} = "inet";
		}

		my $changePort = &checkyN("Do you want to change the default port for ssh?");
		if ($changePort == 1) {
			print "What port?: ";
			chomp(my $sshPort = <STDIN>);
			$sshPort =~ s/\D//;
			$sshdSettings{"Port"} = $sshPort;
		}

		my @sshdKeys = keys(%sshdSettings);
		@sshdKeys = sort @sshdKeys;
		my $sshdConfigOutputString;
		foreach my $key (@sshdKeys) {
			my $basekey;
			if ($key =~ /^(.*)\*!\*.*\*!\*/) {
				$basekey = $1;
			} else {
				$basekey = $key;
			}

			$sshdConfigOutputString .= "$basekey $sshdSettings{$key}\n";
		}

		print "Here's the new sshd_config:";

		&enterToContinue;
		print "$sshdConfigOutputString";

		my $saveSSHD = &checkYn("Save these changes to sshd_config (a backup has been made)?");
		if ($saveSSHD && $debug == 0) {
			open SSHDCONFIG, ">sshd_config";
			print SSHDCONFIG "$sshdConfigOutputString";
			close SSHDCONFIG;
		} else {
			my $again = checkYn("Would you like to go through sshd_config setup again?");
			if ($again) {
				&sshdConfiguration;
			}
		}
}

sub checkPiUser {
	my $remove = &checkyN("This is only relevant if you are using raspbian - would you like to remove the user and homefolder for 'pi'? (Note that this only works if you are NOT using sudo or su - aka logged directly into root!)");
	if ($remove) {
		&runOnSystem("deluser --remove-home pi");
	}

}

sub updates {
	my $runUpgrades = $_[0];

	&runOnSystem('apt-get update');

	if ($runUpgrades) {
		&runOnSystem("apt-get upgrade -y");
	}

	&runOnSystem('apt-get install unattended-upgrades bsd-mailx fail2ban ufw -y')

}

sub finishUp {
	print "Running a few finishing touches...";
	# restart ssh
	print "Restarting ssh...";
	&runOnSystem("service ssh restart");
	print "Done.\n";
	# enable ufw
	print "Enabling UFW (firewall)...";
	&runOnSystem("ufw enable");
	print "Done.\n";


	my $reboot = &checkYn("Finished. Would you like to reboot now?");
	if ($reboot) {
		&runOnSystem("reboot");
	}

}

## support routines

sub showFileContents {
	my $file = $_[0];
	open FILE, "<$file";
	my @hold = <FILE>;
	foreach(@hold) {
		print $_;
	}
	close FILE;
}

sub doesItExist {
	my $name = $_[0];
	if (-e $name) {
		return 1;
	} else {
		return 0;
	}

}

sub printHeader {
	my $header = $_[0];
	print "\n\n\t$header:\n\n";
}

sub runOnSystem {
	my $command = $_[0];
	if ($debug) {
		print "debug: $command\n";
	} else {
		print "executing: $command\n";
		system("$command");
	}

}

sub dieWithMessage {
	my $message = $_[0];
	die "Please start the script again: $message\n";
}

sub enterToContinue {
	print "\nPress enter to continue...\n";
	my $enter = <STDIN>;
}

sub checkYn {
	my $prompt = $_[0] . " [Y/n]:";
	print "$prompt";
	my $return = -1;
	while($return == -1) {
		chomp(my $yn = <STDIN>);
		if ($yn =~ /^y*$/i) {
		 	$return = 1;
		} elsif ($yn =~ /^n+$/i) {
			$return = 0;
		} else {
			print "Sorry, that's not valid input. Please try again:\n\n$prompt";
		}
	}
	return $return;

}

sub checkyN {
	my $prompt = $_[0] . " [y/N]:";
	print "$prompt";
	my $return = -1;
	while($return == -1) {
		chomp(my $yn = <STDIN>);
		if ($yn =~ /^y+$/i) {
		 	$return = 1;
		} elsif ($yn =~ /^n*$/i) {
			$return = 0;
		} else {
			print "Sorry, that's not valid input. Please try again:\n\n$prompt";
		}
	}
	return $return;
}
