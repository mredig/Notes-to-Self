#!/usr/bin/perl

if ($ARGV[0] eq "-d") {
	$debug = 1;
}

$gNewUsername;


&main;

sub main {
	print "Be sure that this script is launched AS ROOT (NOT sudo and NOT su - I mean you CAN run it with those, but you might run into errors) as it will be facilitating many system level changes, including manipulating users.\n";
	&enterToContinue;

	&printHeader("New User Setup");

	my $newUser = &checkYn("Do you want to add a new user with sudo (important on raspbian, probably less so on other distros)?");
	if ($newUser) {
		&newUserSetup;
	}

	&printHeader("ssh Setup");
	&sshSetup;


	&printHeader("Getting up to Date");

	my $runUpgrades = &checkYn("Do you want to run upgrades before continuing? (apt-get update will run regardless)");

	print "Please note that since the next step installs a package that requires configuration afterwards, you will need to come back in a few minutes after the installation completes.";
	&enterToContinue;

	&updates($runUpgrades); #bsd-mailx setup must happen after this & ufw

	&finishUp;
}

sub newUserSetup {
	print "What username would you like?: ";
	chomp(my $newUsername = <STDIN>);
	$newUsername =~ s/\W//gi;
	my $confirm = &checkYn("'$newUsername' - is this correct?");
	if ($confirm == 0) {
		print "Try one more time: ";
		chomp($newUsername = <STDIN>);
		$newUsername =~ s/\W//gi;
		$confirm = &checkYn("'$newUsername' - is this correct?");
		if ($confirm == 0) {
			&dieWithMessage("too many username attempts");
		}
	}
	print "Adding new user '$newUsername' - please follow prompts from system utility:\n";
	$gNewUsername = $newUsername;
	&runOnSystem("adduser $newUsername");
	&runOnSystem("adduser $newUsername sudo");

	&checkPiUser;
}

sub sshSetup {
	my $sshConfirm;
	if ($gNewUsername ne "") {
		$sshConfirm = &checkYn("Would you like to configure ssh for $gNewUsername?");
	} else {
		$sshConfirm = &checkYn("Would you like to configure ssh for a user?");
	}

	if ($sshConfirm == 0) {
		return;
	}

	if ($gNewUsername eq "") {
		print "Which user?: ";
		chomp($gNewUsername) = <STDIN>;
		$gNewUsername =~ s/\W//gi;
	}

	chdir "/home/$gNewUsername";
	if (&doesItExist(".ssh") == 0) {
		&runOnSystem("mkdir .ssh");
	}
	chdir ".ssh";
	if (&doesItExist("id_rsa") == 0) {
		print "Creating ssh key - follow prompts and\n\t-place in directory /home/$gNewUsername/.ssh\n\t-name the file 'id_rsa' (no quotes)\n\t-add a password if you like, but I would argue it's not necessary\n";
		&runOnSystem("ssh-keygen -t rsa -b 4096")
		my $printPub = &checkYn("Would you like the public key printed onscreen?");
		if ($printPub) {
			&showFileContents("id_rsa.pub");
		}
	}

	if (&doesItExist("authorized_keys") == 0) {
		&runOnSystem("touch authorized_keys");
		print "Paste any public ssh keys in here and press CTRL-D when finished:\n\n";
		my @publicKeys = <STDIN>;
		open KEYS ">>authorized_keys";
		print KEYS "@publicKeys";
		close KEYS;
	}

	chdir "../";

	&runOnSystem("chmod -R 700 .ssh");
	&runOnSystem("chown -R $gNewUsername:$gNewUsername .ssh");

	chdir "/etc/ssh";

	open SSHDCONFIG, "<sshd_config";
	my @sshdconf = <SSHDCONFIG>;
	close SSHDCONFIG;

	# print "Before: @sshdconf";
	#
	# foreach(@sshdconf) {
	# 	$_ =~ s/^[#\s]*PermitRootLogin.*$/PermitRootLogin no/;
	# 	$_ =~ s/^[#\s]*PasswordAuthentication.*$/PasswordAuthentication no/;
	# 	$_ =~ s/^[#\s]*AddressFamily.*$/AddressFamily inet/;
	#
	# 	# &replaceWith($_, "PasswordAuthentication", "PasswordAuthentication no");
	# 	# &replaceWith($_, "PermitRootLogin", "PermitRootLogin no");
	# 	# &replaceWith($_, "AddressFamily", "AddressFamily inet");
	# }
	#
	# print "\n\n\n\n\n\nAfter: @sshdconf";



}

sub checkPiUser {
	my $remove = &checkyN("This is only relevant if you are using raspbian - would you like to remove the user and homefolder for 'pi'? (Note that this only works if you are NOT using sudo or su - aka logged directly into root!)");
	if ($remove) {
		&runOnSystem("deluser --remove-home pi");
	}

}

sub updates {
	my $runUpgrades = $_[0];

	&runOnSystem('apt-get update');

	if ($runUpgrades) {
		&runOnSystem("apt-get upgrade -y");
	}

	&runOnSystem('apt-get install unattended-upgrades bsd-mailx fail2ban ufw gufw')

}

sub finishUp {
	print "Running a few finishing touches...";
	# restart ssh
	# enable ufw
	my $reboot = &checkYn("Finished. Would you like to reboot now?");
	if ($reboot) {
		&runOnSystem("reboot");
	}

}

## support routines

sub showFileContents {
	my $file = $_[0];
	open FILE, "<$file";
	my @hold = <FILE>;
	foreach(@hold) {
		print $_;
	}
	close FILE;
}

sub doesItExist {
	my $name = $_[0];
	if (-e $name) {
		return 1;
	} else {
		return 0;
	}

}

sub printHeader {
	my $header = $_[0];
	print "\n\n\t$header:\n\n";
}

sub runOnSystem {
	my $command = $_[0];
	if ($debug) {
		print "debug: $command\n";
	} else {
		print "not in debug: $command\n";
		# system("$command");
	}

}

sub dieWithMessage {
	my $message = $_[0];
	die "Please start the script again: $message\n";
}

sub enterToContinue {
	print "\nPress enter to continue...\n";
	my $enter = <STDIN>;
}

sub checkYn {
	my $prompt = $_[0] . " [Y/n]:";
	print "$prompt";
	my $return = -1;
	while($return == -1) {
		chomp(my $yn = <STDIN>);
		if ($yn =~ /^y*$/i) {
		 	$return = 1;
		} elsif ($yn =~ /^n+$/i) {
			$return = 0;
		} else {
			print "Sorry, that's not valid input. Please try again:\n\n$prompt";
		}
	}
	return $return;

}

sub checkyN {
	my $prompt = $_[0] . " [y/N]:";
	print "$prompt";
	my $return = -1;
	while($return == -1) {
		chomp(my $yn = <STDIN>);
		if ($yn =~ /^y+$/i) {
		 	$return = 1;
		} elsif ($yn =~ /^n*$/i) {
			$return = 0;
		} else {
			print "Sorry, that's not valid input. Please try again:\n\n$prompt";
		}
	}
	return $return;
}
